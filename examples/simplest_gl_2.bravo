// Borrowed from:
//   http://games.greggman.com/game/webgl-fundamentals/

// Returns a random integer from 0 to range - 1.
function randomInt(range) {
  return Math.floor(Math.random() * range);
}

// Fill the buffer with the values that define a rectangle.
function setRectangle(gl, x, y, width, height) {
  var x1 = x;
  var x2 = x + width;
  var y1 = y;
  var y2 = y + height;
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
     x1, y1,
     x2, y1,
     x1, y2,
     x1, y2,
     x2, y1,
     x2, y2]), gl.STATIC_DRAW);
}

function main(p){
  var log = p.log.bind(p);
  var gl;

  p.onchangeview = function(view) {
    var rect = view.rect;

    if (!gl) {
      gl = new p.Graphics3D(rect);

      gl.viewport(0, 0, rect.width, rect.height);
      gl.clearColor(0, 0.5, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT);

      // setup a GLSL program
      var f = [
        "precision mediump float;",
        "",
        "uniform vec4 u_color;",
        "",
        "void main() {",
        "   gl_FragColor = u_color;",
        "}",
        ""].join("\n");

      var v = [
        "attribute vec2 a_position;",
        "",
        "void main() {",
        "  gl_Position = vec4(a_position, 0, 1);",
        "}",
        ""].join("\n");

      var vs = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vs, v);
      gl.compileShader(vs);

      var fs = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fs, f);
      gl.compileShader(fs);

      var program = gl.createProgram();
      gl.attachShader(program, vs);
      gl.attachShader(program, fs);
      gl.linkProgram(program);
      gl.useProgram(program);

      // look up where the vertex data needs to go.
      var positionLocation = gl.getAttribLocation(program, "a_position");

      // lookup uniforms
      var resolutionLocation = gl.getUniformLocation(program, "u_resolution");
      var colorLocation = gl.getUniformLocation(program, "u_color");

      // set the resolution
      gl.uniform2f(resolutionLocation, rect.width, rect.height);

      // Create a buffer.
      var buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.enableVertexAttribArray(positionLocation);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      // draw 50 random rectangles in random colors
      for (var ii = 0; ii < 50; ++ii) {
        // Setup a random rectangle
        setRectangle(gl, randomInt(300), randomInt(300), randomInt(300), randomInt(300));

        // Set a random color.
        gl.uniform4f(colorLocation, Math.random(), Math.random(), Math.random(), 1);

        // Draw the rectangle.
        gl.drawArrays(gl.TRIANGLES, 0, 6);
        log("error: " + gl.getError());
      }

      gl.swapBuffers(function() {
        log("error: " + gl.getError());
      });
    } else {
      gl.resizeBuffers(rect);
    }
  };
}



