// Borrowed from:
//   http://games.greggman.com/game/webgl-fundamentals/
function main(p){
  var log = p.log.bind(p);
  var gl;

  p.onchangeview = function(view) {
    var rect = view.rect;

    if (!gl) {
      gl = new p.Graphics3D(rect);

      // setup a GLSL program
      var f = [
        "void main() {",
        " gl_FragColor =  vec4(0.0, 0.0, 1.0, 1.0);",
        "}",
        ""].join("\n");

      var v = [
        "attribute vec2 a_position;",
        "",
        "void main() {",
        "  gl_Position = vec4(a_position, 0, 1);",
        "}",
        ""].join("\n");

      var vs = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vs, v);
      gl.compileShader(vs);

      var fs = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fs, f);
      gl.compileShader(fs);

      var program = gl.createProgram();
      gl.attachShader(program, vs);
      gl.attachShader(program, fs);
      gl.linkProgram(program);
      gl.useProgram(program);

      // look up where the vertex data needs to go.
      var positionLocation = gl.getAttribLocation(program, "a_position");

      // Create a buffer and put a single clipspace rectangle in
      // it (2 triangles)
      var buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array([
              -1.0, -1.0,
               1.0, -1.0,
              -1.0,  1.0,
              -1.0,  1.0,
               1.0, -1.0,
               1.0,  1.0]),
          gl.STATIC_DRAW);
      gl.enableVertexAttribArray(positionLocation);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      // draw
      gl.drawArrays(gl.TRIANGLES, 0, 6);

      gl.swapBuffers(function() {
        log("error: " + gl.getError());
      });
    } else {
      gl.resizeBuffers(rect);
    }
  };
}



